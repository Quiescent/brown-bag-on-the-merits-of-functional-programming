#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil num:nil todo:t |:t
#+TITLE: Why Functional Programming
#+DATE: <2019-08-23 Fri>
#+AUTHOR: Edward John Steere
#+EMAIL: steere@JNB002512673
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+OPTIONS: reveal_center:t reveal_control:t reveal_defaulttiming:nil
#+OPTIONS: reveal_fragmentinurl:nil reveal_generate_ids:t
#+OPTIONS: reveal_global_footer:nil reveal_global_header:nil
#+OPTIONS: reveal_hashonebasedindex:nil reveal_height:nil
#+OPTIONS: reveal_history:nil reveal_inter_presentation_links:nil
#+OPTIONS: reveal_keyboard:t reveal_mousewheel:nil reveal_overview:t
#+OPTIONS: reveal_pdfseparatefragments:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: reveal_slide_number:"c" reveal_toc_footer:nil
#+OPTIONS: reveal_width:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_EXTRA_OPTIONS:
#+REVEAL_TRANS: convex
#+REVEAL_SPEED: default
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_EXTRA_ATTR:
#+REVEAL_HLEVEL:
#+REVEAL_MISCINFO:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_EXTERNAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.9)

* (And maybe some points in Scala's favour)

* Immutable!

* No Variables!

* No Side Effects!

* Reasoning about Code!

* Testing Code!

* Reliable and Safe Concurrency!

/Three-tier locking-transaction based architectures "scale"/

* Scala: Strong Types Help with Better Compile Time Checks

** More Powerful Refactoring Tools

/How does one *safely* refactor functions which return units?/

** Reliable and Explicit Error Handling Without the Boiler Plate

#+BEGIN_SRC scala
  for {
    catCount     <- configuration.getOption("numberOfCatsToDeploy")
    fantasticnes <- awesomeServer.queryGeneralLevelOfAwesome
    system       <- setupTheCats(catCount, fantasticness)
  } yield system
#+END_SRC

** Cutting Edge Research in Type Theory

*** Refinement Types

#+BEGIN_SRC scala
  // This refines Int with the Positive predicate and checks via an
  // implicit macro that the assigned value satisfies it:
  scala> val i1: Int Refined Positive = 5
  i1: Int Refined Positive = 5

  // If the value does not satisfy the predicate, we get a meaningful
  // compile error:
  scala> val i2: Int Refined Positive = -5
  <console>:22: error: Predicate failed: (-5 > 0).
         val i2: Int Refined Positive = -5
#+END_SRC

[[https://github.com/fthomas/refined]]

** Dependant Types

 - Make bad states impossible.
 - Encode domain knowledge in the compiler.

** Monads

/"How do they work?"/

** Applicative

/"Very recent innovation which abstracts over gluing programs together"/

* Laundry List of Things

These things get rattled off all the time.

* The Truth:

"It is a logical impossibility to make a language more powerful by
omitting features, no matter how bad they may be."

* Why Is It A Good Thing To Remove Some Features?

* Object Oriented Programmers Are Already Doing This!

 - Composition > Inheritance

* False Economy of Re-Use

/You don't want a tangled ball of mud.../

* We Want More Mileage for the Code Which We Write

 - build bigger programs from smaller abstractions;
 - composition, composition, composition...

* In FP We Compose, then We Abstract Over More Ways of Composing

 - Compose ~o~
 - Monad
 - Applicative
 - Arrow
 - Higher Kinded Types

* Remarks

** It's possible to write good code in any language or paradigm

** Functional programming offers more static reasoning power than imperative programming

** You can implement purely functional programming using objects (Scala does this!)
